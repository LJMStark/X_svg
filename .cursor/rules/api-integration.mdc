---
globs: api_client.py,batch_process_tweets.py
description: API集成和客户端管理规范
---

# API集成规范

## API客户端架构

项目使用模块化的API客户端设计，支持多个API提供商：

### 核心组件

- [api_client.py](mdc:api_client.py) - 包含所有API客户端实现
- `BaseAPIClient` - 抽象基类，定义通用接口
- `OpenRouterClient` - OpenRouter API实现
- `GeminiClient` - Gemini API实现（通过代理）
- `APIClientManager` - 客户端管理器，支持故障转移

### API配置

配置文件 [config.json](mdc:config.json) 中的API设置：

```json
{
  "primary_api": "openrouter",
  "openrouter": {
    "enabled": true,
    "key": "",
    "model": "moonshotai/kimi-k2:free",
    "base_url": "https://openrouter.ai/api/v1"
  },
  "gemini": {
    "enabled": false,
    "key": "",
    "model": "gemini-2.5-flash",
    "base_url": "http://xai-studio.top:8000/openai/v1"
  }
}
```

## 速度限制处理

- OpenRouter: 4秒间隔限制
- Gemini: 2秒间隔限制
- 自动重试机制，429错误时递增延迟
- 全局时间跟踪，确保API调用间隔

## 故障转移机制

1. 优先使用主API（primary_api）
2. 主API失败时自动切换到备用API
3. 所有API都失败时返回错误
4. 记录API使用统计信息

## 错误处理模式

```python
def call_api_with_retry(self, prompt: str, content: str, max_retries: int = 3):
    """带重试的API调用"""
    for attempt in range(max_retries):
        try:
            response = self.client.call_api(prompt, content)
            if response:
                return response
        except Exception as e:
            if "429" in str(e):
                # 处理速度限制
                wait_time = 10 * (attempt + 1)
                time.sleep(wait_time)
            else:
                # 其他错误
                time.sleep(5)
    
    return None
```

## 环境变量支持

- `OPENROUTER_API_KEY` - OpenRouter API密钥
- `GEMINI_API_KEY` - Gemini API密钥
- `CONFIG_FILE` - 自定义配置文件路径